from radio import Radio, q

from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
import SocketServer

#class Server(SocketServer.ThreadingMixIn, HTTPServer):
class Server(HTTPServer):
	def __init__(self):
		from threading import Thread

		self.host = 'localhost'
		self.port = 8080

		# create a server with custom handler binding
		SocketServer.TCPServer.__init__(self, (self.host, self.port), RequestHandler)

		import socket

		MCAST_GRP = '224.1.1.1'
		MCAST_PORT = 5007

		sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
		sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 2)

		connection = (sock, (MCAST_GRP, MCAST_PORT))

		self.radio = Radio(q)
		self.s = Thread(target = self.radio.stream, kwargs = { 'connection' : connection })
		self.s.daemon = True
		self.s.start()
	#	self.s.run()

	def sock(self):

		import socket, struct

		MCAST_GRP = '224.1.1.1'
		MCAST_PORT = 5007

		sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
		sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
		sock.bind((MCAST_GRP, MCAST_PORT))
		mreq = struct.pack("4sl", socket.inet_aton(MCAST_GRP), socket.INADDR_ANY)
		sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)

		return(sock)

	# add a client to the radio client list
	# client is in the form of a (host, port) tuple
	def add(self, client):
		# associates a pipe to a particular client
		# radio.broadcast() will stream to all pipes, which can be accessed from the request handler
		self.radio.add(client, self.sock())

	# returns the associated pipe to the client
	def lookup(self, client):
		return(self.radio.clients[client])

class RequestHandler(BaseHTTPRequestHandler):

	def handle(self):
		self.server.add(self.client_address)
		BaseHTTPRequestHandler.handle(self)

	def do_GET(self):
		from os import fdopen

		# gets the pipe associated with the client
		sock = self.server.lookup(self.client_address)

		print(sock)

		self.send_response(200)
		self.send_header('Content-Type', 'audio/mpeg')
		self.end_headers()

#		fp = open('/home/mzhang/Downloads/renmd.mp3')
		data = sock.recv(128 * 1024)
		print('do_get')
		while(data):
			self.wfile.write(data)
			self.wfile.flush()
			data = sock.recv(128 * 1024)
		return()

if(__name__ == '__main__'):
	a = Server()
	try:
		a.serve_forever()
	except KeyboardInterrupt:
		a.shutdown()
